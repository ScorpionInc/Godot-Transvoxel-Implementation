extends Node

#The Transvoxel Algorithm look-up tables
#The following data originates from Eric Lengyel's Transvoxel Algorithm.
#Lengyel, Eric. “Voxel-Based Terrain for Real-Time Virtual Simulations”. PhD diss., University of California at Davis, 2010

#Variables
const regularCellClass:Array = [
	0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
	0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
	0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
	0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
	0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
	0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
	0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
	0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
	0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
	0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
	0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
	0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
	0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
	0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
	0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
	0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00]
var regularCellData:Array = [
	RegularCellData.new(0x00, []),
	RegularCellData.new(0x31, [0, 1, 2]),
	RegularCellData.new(0x62, [0, 1, 2, 3, 4, 5]),
	RegularCellData.new(0x42, [0, 1, 2, 0, 2, 3]),
	RegularCellData.new(0x53, [0, 1, 4, 1, 3, 4, 1, 2, 3]),
	RegularCellData.new(0x73, [0, 1, 2, 0, 2, 3, 4, 5, 6]),
	RegularCellData.new(0x93, [0, 1, 2, 3, 4, 5, 6, 7, 8]),
	RegularCellData.new(0x84, [0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7]),
	RegularCellData.new(0x84, [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7]),
	RegularCellData.new(0xC4, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
	RegularCellData.new(0x64, [0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3]),
	RegularCellData.new(0x64, [0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2]),
	RegularCellData.new(0x64, [0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3]),
	RegularCellData.new(0x64, [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5]),
	RegularCellData.new(0x75, [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6]),
	RegularCellData.new(0x95, [0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8])
]#<RegularCellData>
const regularVertexData:Array = [
	
]
const transitionCellClass:Array = [
	
]

#Overrides/Implements
func _ready() -> void:
	self.set_process(false)

#Functions

#Methods

#Events / Signals
